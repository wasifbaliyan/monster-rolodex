{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","redux/actionTypes.js","App.js","redux/actions.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","actionTypes","connect","state","searchField","searchRobots","fetchRobots","isLoading","errors","dispatch","onSearchChange","e","text","target","value","payload","requestRobots","fetch","then","res","json","data","catch","err","useEffect","filteredMonsters","filter","toLowerCase","includes","Date","getFullYear","style","margin","role","aria-labelledby","href","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80f066aa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = props => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nexport const CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n","export const actionTypes = {\n  CHANGE_SEARCH_FIELD: \"CHANGE_SEARCH_FIELD\",\n  REQUEST_ROBOTS_FAILED: \"REQUEST_ROBOTS_FAILED\",\n  REQUEST_ROBOTS_SUCCESS: \"REQUEST_ROBOTS_SUCCESS\",\n  REQUEST_ROBOTS_PENDING: \"REQUEST_ROBOTS_PENDING\",\n};\n","import React, { useEffect } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"./redux/actions\";\n\nfunction App(props) {\n  // const [searchField, setSearchField] = useState(\"\");\n  // const [monsters, setMonsters] = useState([]);\n  const { monsters, requestRobots, isLoading } = props;\n  // const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    requestRobots();\n  }, [requestRobots]);\n\n  // useEffect(() => {\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //     .then((response) => response.json())\n  //     .then((users) => {\n  //       setMonsters(users);\n  //       setIsLoading(false);\n  //     });\n  // }, [monsters]);\n  // const handleChange = (e) => {\n  //   setSearchField(e.target.value);\n  // };\n  const handleChange = (e) => {\n    props.onSearchChange(e);\n  };\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(props.searchField.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox placeholder=\"Search Monsters\" handleChange={handleChange} />\n      {isLoading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <CardList monsters={filteredMonsters} />\n      )}\n      <footer className=\"footer\">\n        © {new Date().getFullYear()}, Made with\n        <span\n          style={{ margin: \"0 0.3rem\" }}\n          role=\"img\"\n          aria-labelledby=\"heart emoji\"\n        >\n          ❤️\n        </span>\n        by\n        {` `}\n        <a href=\"https://wasifbaliyan.com\">Wasif Baliyan</a>\n      </footer>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  monsters: state.fetchRobots.monsters,\n  isLoading: state.fetchRobots.isLoading,\n  errors: state.fetchRobots.errors,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\n  requestRobots: () => dispatch(requestRobots()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { actionTypes } from \"./actionTypes\";\n\nexport const setSearchField = (text) => ({\n  type: actionTypes.CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: actionTypes.REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((res) => res.json())\n    .then((data) =>\n      dispatch({ type: actionTypes.REQUEST_ROBOTS_SUCCESS, payload: data })\n    )\n    .catch((err) =>\n      dispatch({ type: actionTypes.REQUEST_ROBOTS_FAILED, payload: err })\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { actionTypes } from \"./actionTypes\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nconst initialStateRobots = {\n  monsters: [],\n  isLoading: false,\n  errors: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action) => {\n  switch (action.type) {\n    case actionTypes.CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const fetchRobots = (state = initialStateRobots, action) => {\n  switch (action.type) {\n    case actionTypes.REQUEST_ROBOTS_PENDING:\n      return { ...state, isLoading: true };\n    case actionTypes.REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isLoading: false, monsters: action.payload };\n    case actionTypes.REQUEST_ROBOTS_FAILED:\n      return { ...state, isLoading: false, errors: action.payload };\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { searchRobots, fetchRobots } from \"./reducers\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n  searchRobots: searchRobots,\n  fetchRobots: fetchRobots,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}